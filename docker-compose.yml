version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: dynamic-infrastructure-scaling:${IMAGE_TAG:-latest}
    container_name: dynamic-infrastructure-scaling
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - app-network
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Azure Credentials (should be provided via .env file or environment variables)
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_RESOURCE_GROUP=${AZURE_RESOURCE_GROUP}
      - AZURE_VMSS_NAME=${AZURE_VMSS_NAME}
      # Ollama Configuration
      - OLLAMA_API_URL=${OLLAMA_API_URL}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - OLLAMA_FALLBACK_MODEL=${OLLAMA_FALLBACK_MODEL}
      - SCALING_CONFIDENCE_THRESHOLD=${SCALING_CONFIDENCE_THRESHOLD}
    volumes:
      - app-data:/app/data
      - app-logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "node", "scripts/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Include Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - app
    profiles: ["monitoring"]

  # Optional: Include Grafana for dashboard visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - app-network
    depends_on:
      - prometheus
    profiles: ["monitoring"]

networks:
  app-network:
    driver: bridge

volumes:
  app-data:
    driver: local
  app-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local 